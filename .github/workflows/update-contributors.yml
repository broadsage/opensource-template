# SPDX-FileCopyrightText: Copyright (c) 2025 Broadsage <opensource@broadsage.com>
#
# SPDX-License-Identifier: Apache-2.0

name: Update Contributors Statistics

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 0 * * 0" # Weekly on Sundays at midnight UTC
  workflow_dispatch:

# Enhanced permissions for personal token operations
permissions:
  contents: write
  pull-requests: write

jobs:
  update-contributors:
    runs-on: ubuntu-latest
    # Enhanced permissions for this job to support personal token operations
    permissions:
      contents: write # Required for creating commits and branches
      pull-requests: write # Required for creating pull requests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Use opensource-committer GitHub token for git operations
          # Personal token preserves GPG verification chain (GitHub Apps cannot verify human GPG keys)
          # This follows security best practices for automated commits requiring cryptographic verification
          token: ${{ secrets.DEVEX_GITHUB_COMMITTER_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Configure Git
        run: |
          git config --local user.email "opensource-committer@broadsage.com"
          git config --local user.name "opensource-committer"

          # Configure GPG signing if GPG key is available
          if [ -n "${{ secrets.DEVEX_GITHUB_GPG_PRIVATE_KEY }}" ]; then
            echo "üîê Setting up GPG signing for opensource-committer..."
            
            # Kill any existing GPG agent to start fresh
            gpgconf --kill gpg-agent 2>/dev/null || true
            
            # Set up GPG directory with proper permissions
            mkdir -p ~/.gnupg
            chmod 700 ~/.gnupg
            
            # Create simplified GPG configuration
            cat > ~/.gnupg/gpg.conf << 'GPGCONF'
          use-agent
          pinentry-mode loopback
          batch
          yes
          trust-model always
          no-tty
          quiet
          GPGCONF
            
            cat > ~/.gnupg/gpg-agent.conf << 'AGENTCONF'
          allow-loopback-pinentry
          default-cache-ttl 7200
          max-cache-ttl 7200
          pinentry-program /usr/bin/pinentry-curses
          no-grab
          AGENTCONF
            
            chmod 600 ~/.gnupg/gpg.conf ~/.gnupg/gpg-agent.conf
            
            # Start GPG agent and initialize trust database
            gpg-agent --daemon --batch 2>/dev/null || true
            
            # Initialize the trust database properly
            echo "Initializing GPG trust database..."
            gpg --update-trustdb 2>/dev/null || gpg --check-trustdb 2>/dev/null || true
            
            # Import GPG key with better error handling
            echo "Importing GPG private key..."
            if [ -n "${{ secrets.DEVEX_GITHUB_GPG_PASSPHRASE }}" ]; then
              echo "${{ secrets.DEVEX_GITHUB_GPG_PRIVATE_KEY }}" | base64 -d | \
                gpg --batch --yes --pinentry-mode loopback \
                    --passphrase "${{ secrets.DEVEX_GITHUB_GPG_PASSPHRASE }}" \
                    --import
            else
              echo "${{ secrets.DEVEX_GITHUB_GPG_PRIVATE_KEY }}" | base64 -d | \
                gpg --batch --yes --import
            fi
            
            # Wait a moment for import to complete
            sleep 2
            
            # Get the actual key ID from the imported key
            IMPORTED_KEY_ID=$(gpg --list-secret-keys --with-colons | grep "^sec" | head -1 | cut -d: -f5)
            
            if [ -n "$IMPORTED_KEY_ID" ]; then
              echo "‚úÖ Successfully imported GPG key: $IMPORTED_KEY_ID"
              
              # Check GPG key details and email addresses
              echo "üîç Checking GPG key details for GitHub verification..."
              GPG_KEY_EMAILS=$(gpg --list-keys --with-colons "$IMPORTED_KEY_ID" | grep "^uid" | cut -d: -f10)
              echo "üìß GPG Key User IDs:"
              echo "$GPG_KEY_EMAILS"
              
              COMMIT_EMAIL="opensource-committer@broadsage.com"
              echo "üìß Commit author email: $COMMIT_EMAIL"
              
              # Check if the commit email matches any of the GPG key emails
              if echo "$GPG_KEY_EMAILS" | grep -q "$COMMIT_EMAIL"; then
                echo "‚úÖ GPG key contains matching email for commit author"
              else
                echo "‚ö†Ô∏è  WARNING: GPG key does not contain the commit author email!"
                echo "   This will cause GitHub to show commits as 'Unverified'"
                echo "   Solutions:"
                echo "   1. Add the email '$COMMIT_EMAIL' to your GPG key:"
                echo "      gpg --edit-key $IMPORTED_KEY_ID"
                echo "      > adduid"
                echo "      > [enter name and email: opensource-committer@broadsage.com]"
                echo "   2. Or use your personal email that's in the GPG key for commits"
                echo ""
                echo "   Current GPG key emails:"
                echo "$GPG_KEY_EMAILS" | while IFS= read -r line; do echo "      $line"; done
              fi
              
              # Skip trust setting to avoid trust database issues
              # GPG signing will work without explicit trust for own keys
              echo "Skipping trust configuration (not required for signing)"
              
              # Configure Git to use the imported key
              git config --local user.signingkey "$IMPORTED_KEY_ID"
              git config --local commit.gpgsign true
              git config --local gpg.program gpg
              
              # Set environment variables for later steps
              echo "GPG_KEY_ID=$IMPORTED_KEY_ID" >> "$GITHUB_ENV"
              echo "GPG_TTY=/dev/null" >> "$GITHUB_ENV"
              
              if [ -n "${{ secrets.DEVEX_GITHUB_GPG_PASSPHRASE }}" ]; then
                echo "GPG_PASSPHRASE=${{ secrets.DEVEX_GITHUB_GPG_PASSPHRASE }}" >> "$GITHUB_ENV"
              fi
              
              # Test GPG signing capability with commit verification
              echo "üß™ Testing GPG signing and commit verification..."
              export GPG_TTY=/dev/null
              
              # Create a test commit to verify signing works properly
              TEST_FILE=$(mktemp)
              echo "test content" > "$TEST_FILE"
              
              if [ -n "${{ secrets.DEVEX_GITHUB_GPG_PASSPHRASE }}" ]; then
                echo "test" | gpg --batch --yes --pinentry-mode loopback --no-tty \
                  --passphrase "${{ secrets.DEVEX_GITHUB_GPG_PASSPHRASE }}" \
                  --armor --sign --default-key "$IMPORTED_KEY_ID" >/dev/null 2>&1
                SIGN_TEST_RESULT=$?
              else
                echo "test" | gpg --batch --yes --no-tty --armor --sign --default-key "$IMPORTED_KEY_ID" >/dev/null 2>&1
                SIGN_TEST_RESULT=$?
              fi
              
              if [ $SIGN_TEST_RESULT -eq 0 ]; then
                echo "‚úÖ GPG signing test successful"
                
                # Show the public key that should be uploaded to GitHub
                echo "üìã Public key fingerprint for GitHub verification:"
                gpg --list-keys --with-fingerprint "$IMPORTED_KEY_ID" | grep -A1 "pub\|fpr"
                
                echo ""
                echo "üîë If commits still show as 'Unverified' on GitHub:"
                echo "   1. Ensure this EXACT public key is uploaded to your GitHub account"
                echo "   2. The key must include the email: opensource-committer@broadsage.com"
                echo "   3. GitHub Settings ‚Üí SSH and GPG keys ‚Üí New GPG key"
                echo "   4. Wait a few minutes for GitHub to process the key"
              else
                echo "‚ùå GPG signing test failed"
              fi
              
              echo "‚úÖ GPG signing configured successfully"
            else
              echo "‚ùå Failed to import GPG key - will proceed without signing"
              git config --local commit.gpgsign false
            fi
          else
            echo "No GPG key provided - commits will not be GPG signed"
            git config --local commit.gpgsign false
          fi

          echo "Using opensource-committer authentication for enhanced permissions"

      - name: Update contributor statistics
        run: python scripts/update-contributors.py

      - name: Check for changes
        id: verify-changed-files
        run: |
          if git diff --exit-code --quiet CONTRIBUTORS.md; then
            echo "No changes detected"
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected"
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure Git authentication
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          # Configure Git remote to use opensource-committer token for push operations
          # This provides enhanced permissions while preserving GPG signing
          git remote set-url origin "https://x-access-token:${{ secrets.DEVEX_GITHUB_COMMITTER_TOKEN }}@github.com/${{ github.repository }}.git"
          echo "‚úÖ Configured opensource-committer token for repository operations"

      - name: Commit changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        env:
          GPG_TTY: /dev/null
          GPG_PASSPHRASE: ${{ env.GPG_PASSPHRASE }}
          GNUPGHOME: ~/.gnupg
        run: |
          echo "üìù Creating commit..."

          # Set up GPG environment for GitHub Actions
          export GPG_TTY=/dev/null
          export GNUPGHOME=~/.gnupg

          # Add changed files
          git add CONTRIBUTORS.md

          # Prepare commit message
          COMMIT_MSG="docs(contributors): update dynamic statistics [automated]

          - Updated contributor counts and percentages
          - Refreshed monthly statistics
          - Updated recent activity summary

          Generated by: ${{ github.workflow }} workflow

          Signed-off-by: opensource-committer <opensource-committer@broadsage.com>"

          # Create commit (GPG signing already configured in previous step)
          if [ "$(git config --local commit.gpgsign)" = "true" ]; then
            echo "üîê Creating GPG-signed commit..."
            
            # Ensure GPG agent is running and configured for batch mode
            gpg-agent --daemon --batch 2>/dev/null || true
            
            # For password-protected keys, use passphrase in environment
            if [ -n "$GPG_PASSPHRASE" ]; then
              echo "Using passphrase-protected GPG key..."
              
              # Set environment for non-interactive signing
              export PINENTRY_USER_DATA="USE_CURSES=0"
              export GPG_PASSPHRASE
              
              # Create the commit with GPG signing using passphrase
              echo "$GPG_PASSPHRASE" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --sign /dev/null >/dev/null 2>&1 || true
              git commit -m "$COMMIT_MSG" --signoff
            else
              echo "Using non-passphrase-protected GPG key..."
              # No passphrase needed
              git commit -m "$COMMIT_MSG" --signoff
            fi
            
            echo "‚úÖ GPG-signed commit created successfully"
          else
            echo "üìù Creating unsigned commit..."
            git commit -m "$COMMIT_MSG" --signoff
            
            echo "‚úÖ Unsigned commit created successfully"
          fi

          # Show commit details
          echo "üìã Commit details:"
          git log --pretty=format:"%h %s %G?" -1
          echo ""

      - name: Create Pull Request
        if: steps.verify-changed-files.outputs.changed == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.DEVEX_GITHUB_COMMITTER_TOKEN }}
          title: "üìä Update Contributors Statistics"
          body: |
            ## üìä Automated Contributors Statistics Update

            This PR contains automated updates to the contributors statistics based on the latest repository activity.

            ### üîÑ Changes Made:
            - ‚úÖ Updated contributor counts and percentages
            - ‚úÖ Refreshed monthly statistics highlights
            - ‚úÖ Updated recent activity summary
            - ‚úÖ Recalculated contribution type breakdowns

            ### üìä Statistics Updated:
            - Total contributors count
            - Code contributors percentage
            - Documentation contributors percentage  
            - Bug fixers and feature contributors
            - Monthly activity metrics

            ### ü§ñ Automation Details:
            - **Generated by:** `${{ github.workflow }}` workflow
            - **Triggered by:** ${{ github.event_name }}
            - **Branch:** ${{ github.ref_name }}
            - **Commit:** ${{ github.sha }}

            ### ‚úÖ Compliance:
            - **DCO Signed-off:** Yes (automated)
            - **Commit Author:** opensource-committer
            - **GPG Signed:** Yes (verified commits with personal GPG key)
            - **Authentication:** opensource-committer GitHub token
            - **Security:** Enhanced permissions with preserved verification

            ---

            > This is an automated PR. Please review the changes and merge if everything looks correct.
          branch: contributors/update-stats-${{ github.run_number }}
          base: main
          delete-branch: true
          labels: |
            documentation
            automated
            contributors
          assignees: |
            ${{ github.actor }}
          draft: false

      - name: Trigger status checks
        if: steps.verify-changed-files.outputs.changed == 'true' && steps.create-pr.outputs.pull-request-number
        env:
          GH_TOKEN: ${{ secrets.DEVEX_GITHUB_COMMITTER_TOKEN }}
        run: |
          echo "PR created: #${{ steps.create-pr.outputs.pull-request-number }}"
          echo "PR URL: ${{ steps.create-pr.outputs.pull-request-url }}"

          # Close and reopen the PR to trigger status checks
          echo "Triggering status checks via close/reopen method..."
          gh pr close ${{ steps.create-pr.outputs.pull-request-number }} --comment "**System Notice:** Temporarily closing PR to initialize required branch protection checks and compliance validations."
          sleep 2
          gh pr reopen ${{ steps.create-pr.outputs.pull-request-number }} --comment "**System Notice:** Reopening PR to activate enterprise compliance workflows and mandatory status checks required for merge approval. All configured branch protection rules and quality gates are now active."

          echo "‚úÖ Status checks triggered successfully"

      - name: Summary
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          {
            echo "## üìä Contributors Statistics Updated Successfully"
            echo ""
            echo "A Pull Request has been automatically created with updated contributor statistics."
            echo ""
            echo "### üîÑ Changes Made:"
            echo "- ‚úÖ Updated contributor counts and percentages"
            echo "- ‚úÖ Refreshed monthly statistics highlights"
            echo "- ‚úÖ Updated recent activity summary"
            echo "- ‚úÖ Recalculated contribution type breakdowns"
            echo ""
            echo "### üìã Next Steps:"
            echo "1. Review the created Pull Request"
            echo "2. Status checks should now be running automatically"
            echo "3. Verify the statistical updates are accurate"
            echo "4. Merge the PR to apply the changes"
            echo ""
            if [ -n "${{ steps.create-pr.outputs.pull-request-number }}" ]; then
              echo "üîó **PR #${{ steps.create-pr.outputs.pull-request-number }}:** ${{ steps.create-pr.outputs.pull-request-url }}"
            fi
            echo ""
            echo "‚úÖ **Status Checks:** Automatically triggered via close/reopen method"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: No changes summary
        if: steps.verify-changed-files.outputs.changed == 'false'
        run: |
          echo "## üìä No Updates Required" >> "$GITHUB_STEP_SUMMARY"
          echo "The contributor statistics are already up to date." >> "$GITHUB_STEP_SUMMARY"
