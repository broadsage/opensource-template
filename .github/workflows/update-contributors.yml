name: Update Contributors Statistics

on:
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sundays at midnight UTC
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-contributors:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate GitHub App token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.DEVEX_GITHUB_APP_ID }}
          private-key: ${{ secrets.DEVEX_GITHUB_APP_PRIVATE_KEY }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Configure Git
        run: |
          git config --local user.email "devex-discovery@broadsage.com"
          git config --local user.name "devex-discovery"
          
          # Configure GPG signing if GPG key is available
          if [ -n "${{ secrets.DEVEX_GITHUB_GPG_PRIVATE_KEY }}" ]; then
            echo "üîê Setting up GPG signing for devex-discovery..."
            
            # Set up GPG directory with proper permissions
            mkdir -p ~/.gnupg
            chmod 700 ~/.gnupg
            
            # Create GPG configuration for automated signing
            echo "use-agent" > ~/.gnupg/gpg.conf
            echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
            echo "batch" >> ~/.gnupg/gpg.conf
            echo "yes" >> ~/.gnupg/gpg.conf
            
            echo "pinentry-program /usr/bin/pinentry-curses" > ~/.gnupg/gpg-agent.conf
            echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
            echo "default-cache-ttl 28800" >> ~/.gnupg/gpg-agent.conf
            echo "max-cache-ttl 86400" >> ~/.gnupg/gpg-agent.conf
            
            chmod 600 ~/.gnupg/gpg.conf ~/.gnupg/gpg-agent.conf
            
            # Import GPG key
            if [ -n "${{ secrets.DEVEX_GITHUB_GPG_PASSPHRASE }}" ]; then
              echo "Importing password-protected GPG key..."
              echo "${{ secrets.DEVEX_GITHUB_GPG_PRIVATE_KEY }}" | base64 -d | \
                gpg --batch --yes --pinentry-mode loopback \
                    --passphrase "${{ secrets.DEVEX_GITHUB_GPG_PASSPHRASE }}" \
                    --import 2>/dev/null || echo "GPG import completed"
            else
              echo "Importing unprotected GPG key..."
              echo "${{ secrets.DEVEX_GITHUB_GPG_PRIVATE_KEY }}" | base64 -d | \
                gpg --batch --yes --import 2>/dev/null || echo "GPG import completed"
            fi
            
            # Trust the imported key
            echo "${{ secrets.DEVEX_GITHUB_GPG_KEY_ID }}:6:" | gpg --import-ownertrust 2>/dev/null || true
            
            # Detect the correct key format
            FOUND_KEY=""
            echo "üîç Detecting GPG key format..."
            for key_format in "${{ secrets.DEVEX_GITHUB_GPG_KEY_ID }}" "0x${{ secrets.DEVEX_GITHUB_GPG_KEY_ID }}"; do
              if gpg --list-secret-keys --with-colons | grep -q "$key_format"; then
                FOUND_KEY="$key_format"
                echo "‚úÖ Found key in format: $FOUND_KEY"
                break
              fi
            done
            
            if [ -z "$FOUND_KEY" ]; then
              # Extract key ID from available keys as fallback
              FOUND_KEY=$(gpg --list-secret-keys --with-colons | grep "^sec" | cut -d: -f5 | head -1)
              echo "üìù Using extracted key ID: $FOUND_KEY"
            fi
            
            # Configure Git to use GPG
            git config --local user.signingkey "$FOUND_KEY"
            git config --local commit.gpgsign true
            git config --local gpg.program gpg
            
            # Set environment variables for later steps
            echo "GPG_KEY_ID=$FOUND_KEY" >> $GITHUB_ENV
            echo "GPG_TTY=$(tty)" >> $GITHUB_ENV
            
            if [ -n "${{ secrets.DEVEX_GITHUB_GPG_PASSPHRASE }}" ]; then
              echo "GPG_PASSPHRASE=${{ secrets.DEVEX_GITHUB_GPG_PASSPHRASE }}" >> $GITHUB_ENV
            fi
            
            echo "‚úÖ GPG signing configured successfully"
          else
            echo "No GPG key provided - commits will not be GPG signed"
          fi
          
          echo "Using GitHub App authentication for enhanced permissions"

      - name: Update contributor statistics
        run: python scripts/update-contributors.py

      - name: Check for changes
        id: verify-changed-files
        run: |
          if git diff --exit-code --quiet CONTRIBUTORS.md; then
            echo "No changes detected"
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected"
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        env:
          GPG_TTY: ${{ env.GPG_TTY }}
          GPG_KEY_ID: ${{ env.GPG_KEY_ID }}
          GPG_PASSPHRASE: ${{ env.GPG_PASSPHRASE }}
        run: |
          echo "üìù Creating commit..."
          
          # Set up GPG environment
          export GPG_TTY=$(tty)
          
          # Add changed files
          git add CONTRIBUTORS.md
          
          # Create commit with GPG signing if configured
          if [ -n "$GPG_KEY_ID" ]; then
            echo "üîê Creating GPG-signed commit with key: $GPG_KEY_ID"
            
            # Ensure Git is configured for signing
            git config --local user.signingkey "$GPG_KEY_ID"
            git config --local commit.gpgsign true
            
            # For password-protected keys, test GPG first
            if [ -n "$GPG_PASSPHRASE" ]; then
              echo "Testing GPG signing capability..."
              echo "test" | gpg --batch --yes --pinentry-mode loopback \
                --passphrase "$GPG_PASSPHRASE" \
                --sign --default-key "$GPG_KEY_ID" >/dev/null 2>&1 && \
                echo "‚úÖ GPG test successful" || echo "‚ö†Ô∏è GPG test failed"
            fi
            
            # Attempt GPG-signed commit
            git commit -m "docs(contributors): update dynamic statistics [automated]
            
            - Updated contributor counts and percentages
            - Refreshed monthly statistics
            - Updated recent activity summary
            
            Generated by: ${{ github.workflow }} workflow
            
            Signed-off-by: devex-discovery <devex-discovery@broadsage.com>" --signoff || {
              echo "‚ùå GPG-signed commit failed, falling back to unsigned commit"
              git config --local commit.gpgsign false
              git commit -m "docs(contributors): update dynamic statistics [automated]
              
              - Updated contributor counts and percentages
              - Refreshed monthly statistics
              - Updated recent activity summary
              
              Generated by: ${{ github.workflow }} workflow
              
              Signed-off-by: devex-discovery <devex-discovery@broadsage.com>" --signoff
            }
          else
            echo "üìù Creating unsigned commit (no GPG key configured)"
            git config --local commit.gpgsign false
            git commit -m "docs(contributors): update dynamic statistics [automated]
            
            - Updated contributor counts and percentages
            - Refreshed monthly statistics
            - Updated recent activity summary
            
            Generated by: ${{ github.workflow }} workflow
            
            Signed-off-by: devex-discovery <devex-discovery@broadsage.com>" --signoff
          fi
          
          echo "‚úÖ Commit created successfully"
          
          # Verify commit signature if GPG was used
          if [ -n "$GPG_KEY_ID" ] && git config --local commit.gpgsign | grep -q "true"; then
            echo "üîç Verifying commit signature..."
            if git log --show-signature -1 2>/dev/null | grep -q "Good signature"; then
              echo "‚úÖ Commit is GPG signed and verified"
            else
              echo "‚ö†Ô∏è Commit signature verification inconclusive"
            fi
          fi
          
          # Show commit details
          echo "üìã Commit details:"
          git log --pretty=format:"%h %s %G?" -1
          echo ""

      - name: Create Pull Request
        if: steps.verify-changed-files.outputs.changed == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.generate-token.outputs.token }}
          title: "üìä Update Contributors Statistics"
          body: |
            ## üìä Automated Contributors Statistics Update
            
            This PR contains automated updates to the contributors statistics based on the latest repository activity.
            
            ### üîÑ Changes Made:
            - ‚úÖ Updated contributor counts and percentages
            - ‚úÖ Refreshed monthly statistics highlights
            - ‚úÖ Updated recent activity summary
            - ‚úÖ Recalculated contribution type breakdowns
            
            ### üìä Statistics Updated:
            - Total contributors count
            - Code contributors percentage
            - Documentation contributors percentage  
            - Bug fixers and feature contributors
            - Monthly activity metrics
            
            ### ü§ñ Automation Details:
            - **Generated by:** `${{ github.workflow }}` workflow
            - **Triggered by:** ${{ github.event_name }}
            - **Branch:** ${{ github.ref_name }}
            - **Commit:** ${{ github.sha }}
            
            ### ‚úÖ Compliance:
            - **DCO Signed-off:** Yes (automated)
            - **Commit Author:** devex-discovery
            
            ---
            
            > This is an automated PR. Please review the changes and merge if everything looks correct.
          branch: contributors/update-stats-${{ github.run_number }}
          base: main
          delete-branch: true
          labels: |
            documentation
            automated
            contributors
          assignees: |
            ${{ github.actor }}
          draft: false

      - name: Trigger status checks
        if: steps.verify-changed-files.outputs.changed == 'true' && steps.create-pr.outputs.pull-request-number
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          echo "PR created: #${{ steps.create-pr.outputs.pull-request-number }}"
          echo "PR URL: ${{ steps.create-pr.outputs.pull-request-url }}"
          
          # Close and reopen the PR to trigger status checks
          echo "Triggering status checks via close/reopen method..."
          gh pr close ${{ steps.create-pr.outputs.pull-request-number }} --comment "Temporarily closing to trigger status checks"
          sleep 2
          gh pr reopen ${{ steps.create-pr.outputs.pull-request-number }} --comment "Reopening to activate required status checks for merge"
          
          echo "‚úÖ Status checks triggered successfully"

      - name: Summary
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          {
            echo "## üìä Contributors Statistics Updated Successfully"
            echo ""
            echo "A Pull Request has been automatically created with updated contributor statistics."
            echo ""
            echo "### üîÑ Changes Made:"
            echo "- ‚úÖ Updated contributor counts and percentages"
            echo "- ‚úÖ Refreshed monthly statistics highlights"
            echo "- ‚úÖ Updated recent activity summary"
            echo "- ‚úÖ Recalculated contribution type breakdowns"
            echo ""
            echo "### üìã Next Steps:"
            echo "1. Review the created Pull Request"
            echo "2. Status checks should now be running automatically"
            echo "3. Verify the statistical updates are accurate"
            echo "4. Merge the PR to apply the changes"
            echo ""
            if [ -n "${{ steps.create-pr.outputs.pull-request-number }}" ]; then
              echo "üîó **PR #${{ steps.create-pr.outputs.pull-request-number }}:** ${{ steps.create-pr.outputs.pull-request-url }}"
            fi
            echo ""
            echo "‚úÖ **Status Checks:** Automatically triggered via close/reopen method"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: No changes summary
        if: steps.verify-changed-files.outputs.changed == 'false'
        run: |
          echo "## üìä No Updates Required" >> "$GITHUB_STEP_SUMMARY"
          echo "The contributor statistics are already up to date." >> "$GITHUB_STEP_SUMMARY"
