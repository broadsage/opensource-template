# SPDX-FileCopyrightText: Copyright (c) 2025 Broadsage <opensource@broadsage.com>
# SPDX-License-Identifier: Apache-2.0

---
name: Update Contributors Statistics

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: "0 6 * * *"
  workflow_dispatch:
    # Allow manual triggering
  push:
    branches: [develop]
    paths:
      - ".github/workflows/update-contributors.yml"

permissions: read-all

jobs:
  update-contributors:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Generate GitHub App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.DEVEX_GITHUB_APP_ID }}
          private-key: ${{ secrets.DEVEX_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}

      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          fetch-depth: 0 # Fetch full history for accurate statistics
          token: ${{ steps.generate-token.outputs.token }}
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Configure Git
        run: |
          git config --local user.email "devex-discovery@broadsage.com"
          git config --local user.name "devex-discovery"
          
          # Configure GPG signing if GPG key is available
          if [ -n "${{ secrets.DEVEX_GITHUB_GPG_PRIVATE_KEY }}" ]; then
            echo "Setting up GPG signing for devex-discovery..."
            
            # Import GPG key with passphrase support
            if [ -n "${{ secrets.DEVEX_GITHUB_GPG_PASSPHRASE }}" ]; then
              echo "Using password-protected GPG key"
              # Create GPG agent configuration for unattended operation
              mkdir -p ~/.gnupg
              chmod 700 ~/.gnupg
              
              # Create comprehensive GPG configuration for automated signing
              cat > ~/.gnupg/gpg.conf << EOF
              use-agent
              pinentry-mode loopback
              batch
              yes
              EOF
              
              cat > ~/.gnupg/gpg-agent.conf << EOF
              pinentry-program /usr/bin/pinentry-curses
              allow-loopback-pinentry
              default-cache-ttl 28800
              max-cache-ttl 86400
              EOF
              
              chmod 600 ~/.gnupg/gpg.conf ~/.gnupg/gpg-agent.conf
              
              # Start GPG agent
              gpgconf --kill gpg-agent 2>/dev/null || true
              gpg-agent --daemon --allow-preset-passphrase --max-cache-ttl 86400 >/dev/null 2>&1 || true
              
              # Import key with passphrase
              echo "${{ secrets.DEVEX_GITHUB_GPG_PRIVATE_KEY }}" | base64 -d | \
                gpg --batch --yes --pinentry-mode loopback \
                    --passphrase "${{ secrets.DEVEX_GITHUB_GPG_PASSPHRASE }}" \
                    --import 2>/dev/null || echo "GPG import completed with warnings"
              
              # Trust the imported key automatically
              echo "${{ secrets.DEVEX_GITHUB_GPG_KEY_ID }}:6:" | gpg --import-ownertrust 2>/dev/null || true
              
              # Configure Git to use GPG with passphrase
              echo "Configuring Git with GPG key ID: ${{ secrets.DEVEX_GITHUB_GPG_KEY_ID }}"
              git config --local user.signingkey "${{ secrets.DEVEX_GITHUB_GPG_KEY_ID }}"
              git config --local commit.gpgsign true
              git config --local gpg.program gpg
              
              # Additional GPG configuration for reliable signing
              git config --local gpg.format openpgp
              
              # Set up GPG agent for the session
              export GPG_TTY=$(tty)
              echo "RELOADAGENT" | gpg-connect-agent >/dev/null 2>&1 || true
              
              # Set environment variables for GPG signing
              echo "GPG_TTY=$(tty)" >> $GITHUB_ENV
              echo "GPG_KEY_ID=${{ secrets.DEVEX_GITHUB_GPG_KEY_ID }}" >> $GITHUB_ENV
              echo "GPG_PASSPHRASE=${{ secrets.DEVEX_GITHUB_GPG_PASSPHRASE }}" >> $GITHUB_ENV
              
            else
              echo "Using unprotected GPG key"
              # Set up GPG directory with proper permissions
              mkdir -p ~/.gnupg
              chmod 700 ~/.gnupg
              echo "${{ secrets.DEVEX_GITHUB_GPG_PRIVATE_KEY }}" | base64 -d | \
                gpg --import --batch --yes 2>/dev/null || echo "GPG import completed with warnings"
              
              # Configure Git to use GPG
              echo "Configuring Git with GPG key ID: ${{ secrets.DEVEX_GITHUB_GPG_KEY_ID }}"
              git config --local user.signingkey "${{ secrets.DEVEX_GITHUB_GPG_KEY_ID }}"
              git config --local commit.gpgsign true
              git config --local gpg.program gpg
              git config --local gpg.format openpgp
              
              # Set environment variables for GPG signing
              export GPG_TTY=$(tty)
              echo "GPG_TTY=$(tty)" >> $GITHUB_ENV
              echo "GPG_KEY_ID=${{ secrets.DEVEX_GITHUB_GPG_KEY_ID }}" >> $GITHUB_ENV
            fi
            
            echo "GPG signing enabled for devex-discovery"
            
            # Verify and get the correct key format
            echo "Verifying GPG key format and availability..."
            echo "Requested key ID: ${{ secrets.DEVEX_GITHUB_GPG_KEY_ID }}"
            echo "Available secret keys:"
            gpg --list-secret-keys --keyid-format LONG
            
            # Try to find the key in different formats
            FOUND_KEY=""
            for key_format in "${{ secrets.DEVEX_GITHUB_GPG_KEY_ID }}" "0x${{ secrets.DEVEX_GITHUB_GPG_KEY_ID }}"; do
              if gpg --list-secret-keys --with-colons | grep -q "$key_format"; then
                FOUND_KEY="$key_format"
                echo "✅ Found key in format: $FOUND_KEY"
                break
              fi
            done
            
            if [ -z "$FOUND_KEY" ]; then
              echo "❌ Key not found in any format. Trying to extract from available keys..."
              # Extract the key ID from the available keys
              EXTRACTED_KEY=$(gpg --list-secret-keys --with-colons | grep "^sec" | cut -d: -f5 | head -1)
              if [ -n "$EXTRACTED_KEY" ]; then
                echo "📝 Using extracted key ID: $EXTRACTED_KEY"
                FOUND_KEY="$EXTRACTED_KEY"
              else
                echo "❌ No usable key found"
                exit 1
              fi
            fi
            
            # Always update Git configuration with the correct key format
            if [ -n "$FOUND_KEY" ]; then
              echo "🔧 Updating Git configuration with correct key format: $FOUND_KEY"
              git config --local user.signingkey "$FOUND_KEY"
              # Also set as environment variable for the commit step
              echo "GPG_SIGNING_KEY=$FOUND_KEY" >> $GITHUB_ENV
            fi
            
            # Improved GPG key verification
            echo "Verifying GPG key import with key: $FOUND_KEY"
            if gpg --list-secret-keys --with-colons | grep -q "$FOUND_KEY"; then
              echo "✅ GPG key imported and verified successfully"
              echo "Current Git GPG configuration:"
              git config --local user.signingkey
              
              # Test signing capability with proper passphrase handling
              echo "Testing GPG signing capability with key: $FOUND_KEY"
              if [ -n "${{ secrets.DEVEX_GITHUB_GPG_PASSPHRASE }}" ]; then
                # Test with passphrase for password-protected keys
                echo "test signing" | gpg --batch --yes --pinentry-mode loopback \
                  --passphrase "${{ secrets.DEVEX_GITHUB_GPG_PASSPHRASE }}" \
                  --clear-sign --default-key "$FOUND_KEY" >/dev/null 2>&1 && \
                  echo "✅ GPG signing test successful (password-protected)" || \
                  echo "⚠️ GPG signing test failed - will try during actual commit"
              else
                # Test without passphrase for unprotected keys
                echo "test signing" | gpg --clear-sign --default-key "$FOUND_KEY" >/dev/null 2>&1 && \
                  echo "✅ GPG signing test successful (unprotected)" || \
                  echo "⚠️ GPG signing test failed - will try during actual commit"
              fi
              
            else
              echo "⚠️ GPG key verification inconclusive, but import appeared successful"
              echo "Listing available keys for debugging:"
              gpg --list-secret-keys --keyid-format LONG || true
            fi
            
          else
            echo "No GPG key provided - commits will not be GPG signed"
            echo "To enable GPG signing, add GPG_PRIVATE_KEY and GPG_KEY_ID secrets for devex-discovery"
            echo "For password-protected keys, also add GPG_PASSPHRASE secret"
          fi
          
          echo "Using GitHub App authentication for enhanced permissions"

      - name: Update contributor statistics
        run: python scripts/update-contributors.py

      - name: Check for changes
        id: verify-changed-files
        run: |
          if git diff --exit-code --quiet CONTRIBUTORS.md; then
            echo "No changes detected"
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected"
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Debug GPG configuration before commit
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          echo "🔍 Debugging GPG configuration before creating commit..."
          echo "Current Git configuration:"
          git config --local user.name || echo "No user.name set"
          git config --local user.email || echo "No user.email set"  
          git config --local user.signingkey || echo "No signing key set"
          git config --local commit.gpgsign || echo "GPG signing not enabled"
          echo "Environment variables:"
          echo "GPG_TTY: ${GPG_TTY:-not set}"
          echo "GPG_KEY_ID: ${GPG_KEY_ID:-not set}"
          echo "GPG_SIGNING_KEY: ${GPG_SIGNING_KEY:-not set}"
          echo "Available GPG secret keys:"
          gpg --list-secret-keys --keyid-format LONG || echo "No keys found"

      - name: Commit changes with GPG signing
        if: steps.verify-changed-files.outputs.changed == 'true'
        env:
          GPG_TTY: ${{ env.GPG_TTY }}
          GPG_PASSPHRASE: ${{ env.GPG_PASSPHRASE }}
          GPG_SIGNING_KEY: ${{ env.GPG_SIGNING_KEY }}
        run: |
          echo "📝 Creating GPG-signed commit..."
          
          # Ensure GPG agent is running and configured
          export GPG_TTY=$(tty)
          
          # Ensure the correct signing key is configured
          if [ -n "$GPG_SIGNING_KEY" ]; then
            echo "🔧 Using detected signing key: $GPG_SIGNING_KEY"
            git config --local user.signingkey "$GPG_SIGNING_KEY"
          fi
          
          # Display current GPG configuration
          echo "Current GPG configuration:"
          git config --local user.signingkey
          git config --local commit.gpgsign
          
          # Add changed files
          git add CONTRIBUTORS.md
          
          # Create the commit with GPG signing
          echo "Creating commit with GPG signing..."
          git commit -m "docs(contributors): update dynamic statistics [automated]

          - Updated contributor counts and percentages
          - Refreshed monthly statistics
          - Updated recent activity summary
          
          Generated by: ${{ github.workflow }} workflow
          
          Signed-off-by: devex-discovery <devex-discovery@broadsage.com>" --signoff
          
          echo "✅ Commit created successfully"
          
          # Verify the commit was signed
          echo "🔍 Verifying commit signature..."
          git log --show-signature -1 || echo "Could not verify signature"
          
          # Show commit details
          echo "📋 Commit details:"
          git log --oneline -1

      - name: Create Pull Request
        if: steps.verify-changed-files.outputs.changed == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v6
        env:
          GPG_TTY: ${{ env.GPG_TTY }}
          GPG_KEY_ID: ${{ env.GPG_KEY_ID }}
          GPG_SIGNING_KEY: ${{ env.GPG_SIGNING_KEY }}
          GPG_PASSPHRASE: ${{ env.GPG_PASSPHRASE }}
        with:
          token: ${{ steps.generate-token.outputs.token }}
          title: "📊 Update Contributors Statistics"
          body: |
            ## 📊 Automated Contributors Statistics Update
            
            This PR contains automated updates to the contributors statistics based on the latest repository activity.
            
            ### 🔄 Changes Made:
            - ✅ Updated contributor counts and percentages
            - ✅ Refreshed monthly statistics highlights
            - ✅ Updated recent activity summary
            - ✅ Recalculated contribution type breakdowns
            
            ### 📊 Statistics Updated:
            - Total contributors count
            - Code contributors percentage
            - Documentation contributors percentage  
            - Bug fixers and feature contributors
            - Monthly activity metrics
            
            ### 🤖 Automation Details:
            - **Generated by:** `${{ github.workflow }}` workflow
            - **Triggered by:** ${{ github.event_name }}
            - **Branch:** ${{ github.ref_name }}
            - **Commit:** ${{ github.sha }}
            
            ### ✅ Compliance:
            - **DCO Signed-off:** Yes (automated)
            - **Commit Author:** github-actions
            
            ---
            
            > This is an automated PR. Please review the changes and merge if everything looks correct.
          branch: contributors/update-stats-${{ github.run_number }}
          base: main
          delete-branch: true
          labels: |
            documentation
            automated
            contributors
          assignees: |
            ${{ github.actor }}
          draft: false

      - name: Trigger status checks
        if: steps.verify-changed-files.outputs.changed == 'true' && steps.create-pr.outputs.pull-request-number
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          echo "PR created: #${{ steps.create-pr.outputs.pull-request-number }}"
          echo "PR URL: ${{ steps.create-pr.outputs.pull-request-url }}"
          echo "Using GitHub App token for enhanced permissions"
          
          # With GitHub App token, status checks should trigger automatically
          # But we'll still use the close/reopen method for reliability
          echo "Triggering status checks by closing and reopening PR..."
          
          # Wait a moment for PR to be fully created
          sleep 3
          
          # Close the PR
          gh pr close ${{ steps.create-pr.outputs.pull-request-number }} --comment "🔄 Temporarily closing to trigger status checks (GitHub App automation)..."
          
          # Wait a moment
          sleep 2
          
          # Reopen the PR
          gh pr reopen ${{ steps.create-pr.outputs.pull-request-number }} --comment "✅ Reopened - status checks should now be triggered automatically!"
          
          echo "PR has been closed and reopened to trigger status checks."
          
          # Additional check: verify the PR is open
          PR_STATE=$(gh pr view ${{ steps.create-pr.outputs.pull-request-number }} --json state --jq '.state')
          echo "PR state after reopen: $PR_STATE"
          
          if [ "$PR_STATE" = "OPEN" ]; then
            echo "✅ PR is open and status checks should be running"
          else
            echo "⚠️ PR state is unexpected: $PR_STATE"
          fi

      - name: Create summary
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          {
            echo "## 📊 Contributors Statistics PR Created"
            echo "A Pull Request has been automatically created with updated contributor statistics."
            echo ""
            echo "### 🔄 Changes Made:"
            echo "- ✅ Updated contributor counts and percentages"
            echo "- ✅ Refreshed monthly statistics highlights"
            echo "- ✅ Updated recent activity summary"
            echo "- ✅ Recalculated contribution type breakdowns"
            echo ""
            echo "### 📋 Next Steps:"
            echo "1. Review the created Pull Request"
            echo "2. Status checks should now be running automatically"
            echo "3. Verify the statistical updates are accurate"
            echo "4. Merge the PR to apply the changes"
            echo ""
            if [ -n "${{ steps.create-pr.outputs.pull-request-number }}" ]; then
              echo "🔗 **PR #${{ steps.create-pr.outputs.pull-request-number }}:** ${{ steps.create-pr.outputs.pull-request-url }}"
            fi
            echo ""
            echo "✅ **Status Checks:** Automatically triggered via close/reopen method"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: No changes summary
        if: steps.verify-changed-files.outputs.changed == 'false'
        run: |
          echo "## 📊 No Updates Required" >> "$GITHUB_STEP_SUMMARY"
          echo "The contributor statistics are already up to date." >> "$GITHUB_STEP_SUMMARY"
