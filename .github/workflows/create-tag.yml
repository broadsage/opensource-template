# SPDX-FileCopyrightText: Copyright (c) 2025 Broadsage <opensource@broadsage.com>
#
# SPDX-License-Identifier: Apache-2.0

---
name: Create Tag

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number (e.g., 1.0.0)"
        required: true
        type: string
      release_type:
        description: "Release type"
        required: true
        type: choice
        options:
          - "stable"
          - "alpha"
          - "beta"
          - "rc"
          - "dev"
          - "snapshot"
        default: "stable"
      pre_release_number:
        description: "Pre-release number (e.g., 1, 2, 3) - only for alpha/beta/rc/dev/snapshot"
        required: false
        type: string
        default: "1"
      build_metadata:
        description: "Build metadata (e.g., build.123, 20250827.abc123) - optional"
        required: false
        type: string
      create_release:
        description: "Create GitHub release after tagging"
        required: false
        type: boolean
        default: true

permissions:
  contents: write

jobs:
  create-tag:
    name: Create and Push Tag
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.tag_name }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format
        run: |
          version="${{ github.event.inputs.version }}"
          if ! echo "$version" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Error: Version must be in format X.Y.Z (e.g., 1.0.0)"
            exit 1
          fi

      - name: Build tag name
        id: build_tag
        run: |
          version="${{ github.event.inputs.version }}"
          release_type="${{ github.event.inputs.release_type }}"
          pre_release_number="${{ github.event.inputs.pre_release_number }}"
          build_metadata="${{ github.event.inputs.build_metadata }}"

          # Start with version
          tag_name="v${version}"

          # Add pre-release identifier if not stable
          if [ "$release_type" != "stable" ]; then
            if [ -z "$pre_release_number" ]; then
              pre_release_number="1"
            fi
            tag_name="${tag_name}-${release_type}.${pre_release_number}"
          fi

          # Add build metadata if provided
          if [ -n "$build_metadata" ]; then
            tag_name="${tag_name}+${build_metadata}"
          fi

          echo "tag_name=$tag_name" >> "$GITHUB_OUTPUT"
          echo "Final tag name: $tag_name"

      - name: Check if tag exists
        run: |
          tag_name="${{ steps.build_tag.outputs.tag_name }}"
          if git rev-parse "$tag_name" >/dev/null 2>&1; then
            echo "Error: Tag $tag_name already exists"
            exit 1
          fi

      - name: Create and push tag
        id: create_tag
        run: |
          tag_name="${{ steps.build_tag.outputs.tag_name }}"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create tag
          git tag -a "$tag_name" -m "Release $tag_name"

          # Push tag
          git push origin "$tag_name"

          echo "tag_name=$tag_name" >> "$GITHUB_OUTPUT"
          echo "Successfully created and pushed tag: $tag_name"

      - name: Create GitHub Release
        if: ${{ github.event.inputs.create_release == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name="${{ steps.create_tag.outputs.tag_name }}"
          release_type="${{ github.event.inputs.release_type }}"

          # Determine if this is a pre-release
          is_prerelease="false"
          if [ "$release_type" != "stable" ]; then
            is_prerelease="true"
          fi

          # Create release
          gh release create "$tag_name" \
            --title "Release $tag_name" \
            --notes "Release $tag_name created via workflow dispatch" \
            "$([ "$is_prerelease" = "true" ] && echo --prerelease )" \
            --generate-notes

      - name: Summary
        run: |
          {
            echo "## 🏷️ Tag Created Successfully"
            echo ""
            echo "**Tag Name:** \`$tag_name\`"
            echo "**Release Type:** ${{ github.event.inputs.release_type }}"
            echo "**Created Release:** ${{ github.event.inputs.create_release }}"
            echo ""
            echo "The tag has been created and pushed to the repository."
            if [ "${{ github.event.inputs.create_release }}" = "true" ]; then
              echo "A GitHub release has also been created."
            fi
          } >> "$GITHUB_STEP_SUMMARY"
